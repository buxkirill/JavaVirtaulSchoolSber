import java.util.Scanner;

public class Work {

    public static void main(String[] args) {
        int n, result = 0, i=0;

        Scanner input = new Scanner(System.in);
        System.out.print("Введите количестов n");
        n = input.nextInt();
        while (i < n) {
            result += i;
            i++;
        };
        if (result == (n * (n + 1)) / 2) {
            System.out.println("Формула работает");
        };
        System.out.println(
                1


        );
    }

}

import java.util.Scanner;

public class Work {

    public static void main(String[] args) {
        int people = 9870;
        int count_years = 0;

        while (people < 30000) {
            System.out.println(people);
            people *= 1.1;
            count_years++;
        };

        System.out.println(
                count_years


        );
    }

}

import java.util.Scanner;

public class Work {
    /**
     Задание

     Напишите программу, которая запрашивает у пользователя числовые значения,
     а выводит количество положительных и количество отрицательных введенных значений.

     Подсказка: в качестве значения сигнальной метки используйте 0.
     */
    public static void main(String[] args) {

        int positive = 0, negative = 0, num;
        boolean stop = false;
        Scanner input = new Scanner(System.in);

        while (!stop) {
            System.out.print("Введите число ");
            num = input.nextInt();
            if (num > 0) {
                positive++;
            } else {
                negative++;
            }
            System.out.println("Положительных:" + positive + ". Отрицательных: " + negative);

        }

        System.out.println(



        );
    }

}

import java.util.Scanner;

public class Work {
    /**
     Задание

     Напишите программу с интерактивным циклом проверки правильности ввода данных,
     считывающую пары целых чисел до тех пор, пока не встретит пару, в которой одно из чисел кратно другому.
     */
    public static void main(String[] args) {

        int a, b;
        boolean flag = false;
        Scanner input = new Scanner(System.in);

        while (!flag) {
            System.out.print("Введите 2 числа через пробел");

            a = input.nextInt();
            b = input.nextInt();

            if ((a % b == 0) || (b % a == 0)) {
                flag = true;
                System.out.println("Числа кратны");
            }
        }


        System.out.println(



        );
    }

}

import java.util.Scanner;

public class Work {
    /**
     Задание

     Напишите программу, которая отображает таблицу умножения для чисел от 0 до 9.
     */
    public static void main(String[] args) {


        for (int i = 1; i <= 9; i++) {
            for (int j = 1; j <= 9; j++) {
                System.out.print("\t" + (i * j));
            }
            System.out.println();
        }





        System.out.println(

        );
    }

}

import java.util.Scanner;

public class Work {
    /**
     Задание

     Напишите программу, которая запрашивает у пользователю строку и отображает ее в обратном порядке. Пример запуска:

     Введите строку: ABCD
     Обратная строка равна DCBA
     */
    public static void main(String[] args) {
        String word;
        String reversedWord = "";

        Scanner input = new Scanner(System.in);

        System.out.print("Введите слово ");
        word = input.nextLine();

        for (int i = word.length()-1; i >= 0; i--) {
            reversedWord += word.charAt(i);
        }





        System.out.println(
                reversedWord
        );
    }

}

import java.util.Scanner;

public class Work {
    /**
     Задание №1: Класс Rectangle
     По примеру класса Circle, создайте класс Rectangle для представления прямоугольника. Класс Rectangle должен содержать:

     Два поля данных типа double с именами width и height, задающими ширину и высоту прямоугольника. Значение по умолчанию: -1 как для ширины, так и для высоты.
     Безаргументный конструктор, создающий прямоугольник с указанными по умолчанию значениями.
     Конструктор, создающий прямоугольник с указанными шириной и высотой.
     Метод с именем getArea(), возвращающий площадь этого прямоугольника.
     Метод с именем getPerimeter(), возвращающий периметр.
     Нарисуйте (на бумаге или в графическом редакторе) UML-диаграмму класса Rectangle, а затем реализуйте этот класс.
     Напишите клиент этого класса — программу, которая создает два объекта типа Rectangle: первый — с шириной 4 и высотой 40,
     а второй - с шириной 3.5 и высотой 35.9. Программа также должна отображать ширину, высоту, площадь и периметр каждого прямоугольника в указанном порядке.
     */
    public static void main(String[] args) {
        Rectangle rect1 = new Rectangle(4, 40);
        Rectangle rect2 = new Rectangle(3.5, 35.9);

        System.out.println("Программа также должна отображать ширину " + rect1.width +
                ", высоту " + rect1.height + ", площадь " + rect1.getArea() +
                " и периметр " + rect1.getPerimeter() + " каждого прямоугольника в указанном порядке.");
        System.out.println("Программа также должна отображать ширину" + rect2.width +
                ", высоту " + rect2.height + ", площадь " + rect2.getArea() +
                " и периметр " + rect2.getPerimeter() + " каждого прямоугольника в указанном порядке.");
    }




}

import java.util.Scanner;

public class Work {
    /**
     Задание №2: Класс Stock
     По примеру класса Circle, создайте класс Stock для представления акций компании. Класс Stock должен содержать:

     Строковое поле данных с именем symbol для обозначения акций.
     Строковое поле данных с именем name для наименования акций.
     Поле данных previousClosingPrice типа double, в котором хранится стоимость акций на момент закрытия предыдущего дня.
     Поле данных currentPrice типа double, в котором хранится стоимость акций в настоящий момент.
     Конструктор, создающий акции с указанными обозначением и наименованием.
     Метод с именем getChangePercent(), который возвращает процент изменения стоимости акций с previousClosingPrice на currentPrice.
     Нарисуйте (на бумаге или в графическом редакторе) UML-диаграмму класса Stock,
     а затем реализуйте этот класс. Напишите клиент этого класса — программу,
     которая создает объект типа Stock с обозначением SBER, именем ПАО Сбербанк,
     стоимостью акций на момент закрытия предыдущего дня, равной 281.50. З
     адайте новую стоимость акций в настоящий момент, равную 282.87, и отобразите процент изменения стоимости акций.
     */
    public static void main(String[] args) {
        Stock stock = new Stock("SBER", "ПАО Сбербанк", 281.5, 282.87);

        System.out.println(stock.getChangePercent());

    }




}
import java.util.Scanner;

public class Work {
    /**
     Задание №3: Класс Date
     Напишите программу, которая создает объект Date,
     устанавливает у него прошедшее время, равным 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000 и 100000000000,
     и отображает дату и время с помощью метода toString(), соответственно.
     */
    public static void main(String[] args) {
        long[] array = new long[]{10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000l, 100000000000l};

        for (long e: array) {
            System.out.println(new java.util.Date(e).toString());
        }

    }




}
import java.util.Scanner;

public class Work {
    /**
     Задание №4: Класс Random
     Напишите программу, которая создает объект типа Random с начальным (случайным)
     значением 1000 и отображает первые 50 случайных целых чисел между 0 и 100 с помощью метода nextInt(100).

     */
    public static void main(String[] args) {
        java.util.Random random = new java.util.Random(1000);


        for (int i=0; i < 50; i++) {
            System.out.println(random.nextInt(100));
        }

    }




}
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №5: Класс GregorianCalendar
     У Java API в пакете java.util есть класс GregorianCalendar, который можно использовать для получения года, месяца и дня даты.
     Безаргументный конструктор создает объект типа GregorianCalendar для текущей даты,
     а методы get(GregorianCalendar.YEAR), get(GregorianCalendar.MONTH) и get(GregorianCalendar.DAY_OF_MONTH)
     возвращают год, месяц (от 0 до 11) и день. Напишите программу для выполнения следующих двух задач:

     1. Отобразите текущий год, месяц и день.

     2. У класса GregorianCalendar есть метод setTimeInMillis(long),
     который можно использовать для задания указанного времени,
     прошедшего с 1 января 1970 г. Установите значение, равное 1234567898765L, и отобразите для него год, месяц и день.
     */
    public static void main(String[] args) {
        java.util.GregorianCalendar date = new java.util.GregorianCalendar();
        System.out.println(date.get(GregorianCalendar.YEAR) + " " + date.get(GregorianCalendar.DAY_OF_MONTH) + " " + date.get(GregorianCalendar.MONTH));
        date.setTimeInMillis(1234567898765L);
        System.out.println(date.get(GregorianCalendar.YEAR) + " " + date.get(GregorianCalendar.DAY_OF_MONTH) + " " + date.get(GregorianCalendar.MONTH));
    }




}
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Создайте класс с именем StopWatch для представления секундомера. Класс StopWatch должен содержать:
     *
     * Скрытые поля данных startTime и endTime с getter-методами.
     * Безаргументный конструктор, который инициализирует startTime с текущим временем.
     * Метод с именем start(), который сбрасывает startTime до текущего времени.
     * Метод с именем stop(), который присваивает endTime текущее время.
     * Метод с именем getElapsedTime(), который возвращает прошедшее время на секундомере в миллисекундах.
     * Нарисуйте UML-диаграмму класса StopWatch, а затем реализуйте этот класс. Напишите клиент этого класса – программу, которая вычисляет время выполнения сортировки 100 000 чисел методом выбора.
     */
    public static double[] array = new double[100000];
    public static void main(String[] args) {
        StopWatch obj = new StopWatch();
        for (int i = 0; i < array.length; i++) array[i] = Math.random();
        obj.start();
        Arrays.sort(array);
        obj.stop();
        System.out.println("Ушло времени" + (Long)obj.getElapsedTime());
    }




}
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Задание №7: Класс Location
     * Создайте класс с именем Location для нахождения наибольшего элемента и его позиции в двумерном массиве.
     * Класс должен содержать public-поля row, column и maxValue,
     * в которых будут храниться наибольший элемент типа double и его индексы в двумерном массиве со строчками и столбцами типа int.
     *
     * Напишите следующий метод, который возвращает позицию наибольшего элемента в двумерном массиве:
     *
     * public static Location locateLargest(double[][] a)
     * Возвращаемое значение должно быть типа Location. Напишите клиент этого класса — программу,
     * которая предлагает пользователю ввести двумерный массив и отображает позицию наибольшего элемента в этом массиве.
     * Пример выполнения программы:
     *
     * Введите количество строчек и столбцов массива: 3 4
     * Введите массив:
     * 23.5 35 2 10
     * 4.5 3 45 3.5
     * 35 44 5.5 9.6
     * Наибольший элемент массива, равный 45.0, находится в позиции (1, 2)
     */
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Введите количество строчек и столбцов массива:");

        int rows = input.nextInt();
        int cols = input.nextInt();
        double[][] array = new double[rows][cols];

        System.out.println("");
        System.out.print("Введите массив: ");
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                array[row][col] = input.nextDouble();
            }
        }
        Location obj = new Location();
        obj = obj.locateLargest(array);


        System.out.println("Наибольший элемент массива, равный " + obj.maxValue +
                ", находится в позиции (" + obj.row + ", " + obj.column + ")");

    }




}
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**

     */
    public static void main(String[] args) {
        Account account = new Account(1122, 20000);
        Account.setAnnualInterestRate(4.5);
        account.withdraw(2500);
        account.deposit(3000);
        System.out.println("Баланс равен " + account.getBalance() + " руб.");
        System.out.println("Ежемесячный процент равен " + account.getMonthlyInterest() + " руб.");
        System.out.println("Этот счет был создан " + account.getDateCreated());


    }




}
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Создайте класс MyTime для представления времени. Класс MyTime должен содержать:
     *
     * Поля данных hour, minute и second, которые представляют время.
     * Безаргументный конструктор, который создает объект типа MyTime для текущего времени.
     * (Значения полей данных этого объекта представляют текущее время.)
     * Конструктор, который создает объект типа MyTime с указанным временем в миллисекундах, прошедших с 00:00, 1 января 1970 г.
     * (Значения полей данных этого объекта будут представлять это время.)
     * Конструктор, который создает объект типа MyTime с указанными часами, минутами и секундами.
     * Три getter-метода для полей данных hour, minute и second соответственно.
     * Метод с именем setTime(long elapseTime), который присваивает объекту новое время с помощью прошедшего время.
     * Например, если прошедшее время равно 555550000 миллисекундам, то hour равно 10, minute равно 19, а second равно 10.
     * Нарисуйте UML-диаграмму класса MyTime, а затем реализуйте этот класс.
     * Напишите клиент этого класса — программу, которая создает три объекта типа MyTime (с помощью new MyTime(), new MyTime(555550000) и new MyTime(5, 23, 55))
     * и отображает значениях их полей данных hour, minute и second в формате часы:минуты:секунды.
     *
     * (Подсказка: первые два конструктора извлекут значения hour, minute и second из прошедшего времени.
     * Для безаргументного конструктора текущее время может быть получено с помощью метода System.currentTimeMillis(),
     * как было показано в программе ShowCurrentTime из курса «Основы Java-программирования». Пусть время будет GMT.)
     */


    public static void main(String[] args) {
        MyTime obj1 = new MyTime();
        MyTime obj2 = new MyTime(555550000);
        MyTime obj3 = new MyTime(5, 23, 55);
        System.out.println(obj1.printTime());
        System.out.println(obj2.printTime());
        System.out.println(obj3.printTime());

    }


}
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Задание №10: Класс MyDate
     * Создайте класс с именем MyDate для представления даты. Класс MyDate должен содержать:
     *
     * Поля данных year, month и day, которые представляют дату. Поле month должно быть основано на числе, т.е. 0 — для января, 1 — для февраля и т.д.
     * Безаргументный конструктор, который создает объект типа MyDate для текущей даты.
     * Конструктор, который создает объект типа MyDate с указанным временем в миллисекундах, прошедших с 00:00, 1 января 1970 г.
     * Конструктор, который создает объект типа MyDate с указанными годом, месяцем и днем.
     * Три getter-метода для полей данных year, month и day, соответственно.
     * Метод с именем setDate(long elapsedTime), который присваивает новую дату объекту, используя прошедшее время.
     * Нарисуйте UML-диаграмму класса MyDate, а затем реализуйте этот класс. Напишите клиент этого класса — программу,
     * которая создает два объекта типа MyDate (с помощью new MyDate() и new MyDate(34355555133101L)) и отображает их год, месяц и день.
     *
     * (Подсказка: первые два конструктора извлекут год, месяц и день из прошедшего времени.
     * Например, если прошедшее время составляет 561555550000 миллисекунд, то год равен 1987, месяц равен 9, а день равен 18.
     * Для упрощения кодирования можно использовать класс GregorianCalendar, описанный в подразделе «Задания. Часть 2» этого курса.)
     */


    public static void main(String[] args) {
        MyDate mydate = new MyDate();

        MyDate mydate1 = new MyDate(561555550000l);
        System.out.println(mydate.print());
        System.out.println(mydate1.print());

    }


}
import java.math.BigInteger;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Задание №11
     * Найдите первые 10 чисел с 50 десятичными цифрами, которые кратны 2 или 3.
     *
     */


    public static void main(String[] args) {
        int count = 0;
        BigInteger one = new BigInteger("1");
        BigInteger number = new BigInteger("10000000000000000000000000000000000000000000000000");

        while (count < 10) {
            if (number.mod(BigInteger.valueOf(2)).equals(BigInteger.valueOf(0)) ||
                    number.mod(BigInteger.valueOf(3)).equals(BigInteger.valueOf(0))) {
                System.out.println(number);
                count++;
            }

            number = number.add(one);
        }
    }


}
import java.math.BigInteger;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Задание №12
     * Найдите первые 10 квадратных чисел, которые больше Long.MAX_VALUE.
     * Квадратное число — число в виде .
     * Например, 4, 9 и 16 являются квадратными числами.
     * Найдите эффективный подход для максимально быстрого выполнения своей программы.
     *
     */


    public static void main(String[] args) {
        BigInteger number = new BigInteger(String.valueOf(BigInteger.valueOf(Long.MAX_VALUE)));
        BigInteger firstVal = number.sqrt().add(BigInteger.valueOf(1));
        System.out.println("first val" + firstVal);
        System.out.println("Long.Max is " + number);
        for (int i = 0; i < 10; i++) {

            System.out.println(firstVal.pow(2));
            firstVal = firstVal.add(BigInteger.valueOf(1));
        }
    }


}
import java.math.BigInteger;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Задание №13
     * Напишите программу, которая находит 5 простых чисел, которые больше Long.MAX_VALUE.
     *
     */


    public static void main(String[] args) {
        BigInteger number = new BigInteger(String.valueOf(BigInteger.valueOf(Long.MAX_VALUE)));
        int count = 0;

        while (count < 5) {
            if (number.isProbablePrime(1)) {
                System.out.println(number + " is probably prime");
                count ++;
            }

            number = number.add(BigInteger.valueOf(1));
        }
    }


}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №14
     Простое число называется простым числом Мерсенна, если его можно записать в виде ,
     где р — положительное целое число.
     Напишите программу, которая находит все простые числа Мерсенна для p<=100 и отображает следующие выходные данные:

     p   2^p - 1
     ---------------------
     2      3

     3      7

     5      31
     (Подсказка: Здесь для хранения числа необходимо использовать класс BigInteger,
     так как оно слишком велико, чтобы его можно было хранить с помощью типа данных long.
     В случае long, выполнение программы может занять несколько часов.)
     */


    public static void main(String[] args) {
        BigInteger two = new BigInteger("2");

        for (int p = 0; p <= 100; p++) {
            if (isPrime(p)) {
                System.out.println(two.pow(p).subtract(BigInteger.valueOf(1)));
            }
        }

    }

    public static boolean isPrime(int value) {
        for (int i = 2; i <= value / 2; ++i) {
            if (value % i == 0) {
                return false;
            }
        }
        return true;
    }


}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Задание №15
     * Найдите первые 10 чисел, больших Long.MAX_VALUE, которые кратны 5 или 6.
     */


    public static void main(String[] args) {


        BigInteger number = new BigInteger(String.valueOf(BigInteger.valueOf(Long.MAX_VALUE)));
        int count = 0;
        BigInteger one = new BigInteger("1");

        while (count < 10) {
            if (number.mod(BigInteger.valueOf(5)).equals(BigInteger.valueOf(0)) ||
                    number.mod(BigInteger.valueOf(6)).equals(BigInteger.valueOf(0))) {
                System.out.println(number);
                count++;
            }

            number = number.add(one);

        }
    }
}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     * Задание №22: Класс Triangle
     * Создайте класс Triangle для представления треугольников, который порождается от класса GeometricObject.
     * Класс Triangle должен содержать:
     *
     * Три поля данных типа double с именами side1, side2 и side3 и с заданными по умолчанию значениями,
     * равными 1.0, для обозначения трех сторон треугольника.
     * Безаргументный конструктор, который создает треугольник с заданными по умолчанию значениями.
     * Конструктор, который создает треугольник с side1, side2 и side3.
     * Getter-методы для всех трех полей данных.
     * Метод с именем getArea(), который возвращает площадь этого треугольника.
     * Метод с именем getPerimeter(), который возвращает периметр этого треугольника.
     * Метод с именем toString(), который возвращает строковое описание треугольника.
     * Формулы для вычисления площади треугольника:
     *
     * ,
     *
     * ,
     *
     * где s — полупериметр, а area — площадь треугольника.
     *
     * Метод toString() должен быть реализован следующим образом:
     *
     * return "Треугольник: сторона1 = " + side1 + " сторона2 = " + side2 +
     *   " сторона3 = " + side3;
     * Нарисуйте UML-диаграммы классов Triangle и GeometricObject ,
     * а затем реализуйте эти классы.
     * Напишите клиент этих классов — программу,
     * которая запрашивает у пользователя ввести три стороны треугольника,
     * цвет и логическое значение для указания закрашен ли треугольник.
     * Программа должна создавать объект типа Triangle с указанными сторонами
     * и присваивать значения свойствам цвет (color) и заливка (isFilled) с помощью этих входных данных.
     * Программа должна отображать площадь (area), периметр (perimeter), цвет, а также true или false для указания,
     * закрашен треугольник или нет.
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Введите 3 стороны треугольника через пробел: ");
        double side1, side2, side3;
        String color;
        boolean filled;

        side1 = input.nextDouble();
        side2 = input.nextDouble();
        side3 = input.nextDouble();
        System.out.println();
        System.out.print("Введите цвет: ");
        color = input.next();

        System.out.println();
        System.out.print("Введите закрашен ли треугольник: ");
        filled = input.nextBoolean();

        Triangle triangle = new Triangle(color, filled, side1, side2, side3);

        System.out.println("Периметр " + triangle.getPerimeter());
        System.out.println("Площадь " + triangle.getArea());
        System.out.println("Цвет " + triangle.getColor());
        System.out.println("Закрашен " + triangle.isFilled());


    }
}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №23
     Напишите следующий метод, который возвращает наибольшее значение в целочисленном списке типа ArrayList.
     Этот метод должен возвращать значение null, если список пустой или его размер равен 0.

     public static Integer max(ArrayList<Integer> list)
     Напишите тестовую программу, которая запрашивает у пользователя последовательность чисел,
     заканчивающуюся 0, и вызывает этот метод для возврата наибольшего значения из входных данных.
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<Integer> list = new ArrayList<>();
        int number;
        System.out.print("Введите числа через пробел");
        do {
            number = input.nextInt();
            if (number != 0) {
                list.add(number);
            }
        } while (number != 0);

        System.out.println("Max is " + max(list));





    }

    public static Integer max(ArrayList<Integer> list){
        if (list.isEmpty()) {
            return null;
        }
        else if (list.size() == 0) {
            return null;
        } else {
            return java.util.Collections.max(list);
        }
    }
}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №24
     Напишите программу, которая создает список типа ArrayList
     и добавляет в него объект типа Loan, объект типа Date, строку и объект типа Circle,
     а также используйте цикл для отображения всех элементов в списке путем вызова метода toString() этих объектов.
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<Object> list = new ArrayList<>();

        list.add(new Account());
        list.add(new Triangle());
        list.add(new MyDate());

        for (Object obj: list
             ) {
            System.out.println(obj.toString());
        }







    }

}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №25
     Напишите следующий метод, который перетасовывает элементы целочисленного списка типа ArrayList:

     public static void shuffle(ArrayList<Integer> list)
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<Integer> list = new ArrayList<>();
        int number;
        System.out.print("Введите числа через пробел");
        do {
            number = input.nextInt();
            if (number != 0) {
                list.add(number);
            }
        } while (number != 0);
        shuffle(list);
        System.out.println(list);

    }
    public static void shuffle(ArrayList<Integer> list) {
        java.util.Collections.shuffle(list);
    }
}

import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №26
     Напишите программу, которая случайным образом заполняет матрицу n x n значениями 0 и 1,
     отображает эту матрицу в консоли и находит строчки и столбцы с наибольшим количеством 1.
     (Подсказка: используйте два списка типа ArrayList для хранения индексов строчек
     и столбцов с наибольшим количеством 1.) Далее приведен пример выполнения этой программы:

     Введите размер матрицы: 4
     Матрица со случайными значениями равна
     0011
     0011
     1101
     1010
     Индекс строчки с наибольшим кол-вом единиц: 2
     Индекс столбца с наибольшим кол-вом единиц: 2, 3
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Введите размер матрицы: ");
        ArrayList<ArrayList> list = new ArrayList<>();
        int sizeMatrix = input.nextInt();

        for (int i = 0; i < sizeMatrix; i++) {
            ArrayList<Integer> temp = new ArrayList<>();
            for (int j = 0; j < sizeMatrix; j++) {
                temp.add(getRandomNumber(0,2));
            }
            list.add(temp);
        }
        System.out.println("Сформирована матрица");
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
        int[] result = getMaxRowAndCol(list);

        System.out.println("Индекс строчки с наибольшим кол-вом единиц: " + result[0]);
        System.out.println("Индекс столбца с наибольшим кол-вом единиц: " + result[1]);

    }

    public static int[] getMaxRowAndCol(ArrayList<ArrayList> list ) {
        int[] temp_row = new int[list.size()];
        int[] temp_col = new int[list.size()];
        int maxCol = 0;
        int maxRow = 0;
        for (int i = 0; i < list.size(); i++) {
            for (int j = 0; j < list.size(); j++) {
                temp_row[i] += (Integer) list.get(i).get(j);
                temp_col[j] += (Integer) list.get(i).get(j);
            }

        }

        for (int i = 0; i < temp_row.length; i++) {
            if (temp_row[maxRow] < temp_row[i]) {
                maxRow = i;
            }
            if (temp_col[maxCol] < temp_col[i]) {
                maxCol = i;
            }
        }

        return new int[]{maxRow, maxCol};
    }


    public static int getRandomNumber(int min, int max) {
        return (int) ((Math.random() * (max - min)) + min);
    }

}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №27
     Напишите следующий метод сортировки числового списка типа ArrayList:

     public static void sort(ArrayList<Integer> list)
     Напишите тестовую программу, которая запрашивает у пользователя пять чисел, сохраняет их в списке и отображает в порядке возрастания.
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<Integer> list = new ArrayList<>();
        System.out.print("Введите 5 чисел через пробел: ");
        for (int i = 0; i < 5; i++) {
            list.add(input.nextInt());
        }
        sort(list);
        System.out.println(list);

    }

    public static void sort(ArrayList<Integer> list) {
        java.util.Collections.sort(list);

    }


}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Scanner;

public class Work {
    /**
     Задание №28
     Напишите следующий метод, который возвращает сумму всех чисел в списке типа ArrayList:

     public static double sum(ArrayList<Double> list)
     Напишите тестовую программу, которая запрашивает у пользователя пять чисел, сохраняет их в списке и отображает их сумму.
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<Double> list = new ArrayList<>();
        System.out.print("Введите 5 чисел через пробел: ");
        for (int i = 0; i < 5; i++) {
            list.add(input.nextDouble());
        }
        double result = sum(list);
        System.out.println(result);

    }

    public static double sum(ArrayList<Double> list) {
        double result = 0;
        for (Double val: list) {
            result += val;
        }
        return result;
    }

    public static void sort(ArrayList<Integer> list) {
        java.util.Collections.sort(list);

    }


}
import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.*;

public class Work {
    /**
     Задание №29
     Напишите метод, который удаляет повторяющиеся элементы из целочисленного списка типа ArrayList,
     используя следующий заголовок:

     public static void removeDuplicate(ArrayList<Integer> list)
     Напишите тестовую программу, которая запрашивает у пользователя 10 целых чисел для списка,
     отображает несовпадающие целые числа в порядке их ввода и отделяет их друг от друга только одним пробелом.

     Пример выполнения программы:

     Введите десять целых чисел: 34 5 3 5 6 4 33 2 2 4
     Несовпадающие целые числа равны 34 5 3 6 4 33 2
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<Integer> list = new ArrayList<>();
        System.out.print("Введите десять целых чисел:: ");
        for (int i = 0; i < 10; i++) {
            list.add(input.nextInt());
        }
        removeDuplicate(list);



    }

    public static void removeDuplicate(ArrayList<Integer> list) {
        Set<Integer> temp = new HashSet<>(list);
        System.out.println(" Несовпадающие целые числа равны: " + temp);
    }




}

import java.beans.beancontext.BeanContext;
import java.math.BigInteger;
import java.util.*;

public class Work {
    /**
     Задание №31
     Напишите метод, который возвращает из строки символьный массив типа ArrayList, используя следующий заголовок:

     public static ArrayList<Character> toCharacterArray(String s)
     Например, toCharacterArray("abc") возвращает список, содержащий символы 'a', 'b' и 'c'.
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String temp = "abc";
        System.out.println(toCharacterArray(temp));



    }
    public static ArrayList<Character> toCharacterArray(String s) {

        ArrayList<Character> result = new ArrayList<>();

        for (int i = 0; i < s.length(); i++) {
            result.add(s.charAt(i));
        }
        return result;


    }







}
import java.util.*;

public class Work {
    /**
     Задание №32 «Задача об упаковке в контейнеры»
     Задача об упаковке в контейнеры заключается в упаковке предметов разного веса в контейнеры.
     Пусть каждый контейнер содержит максимум 10 килограммов.
     Программа использует алгоритм, который помещает предмет в первый контейнер, в который он поместится.
     Программа запрашивает у пользователя общее количество предметов и вес каждого предмета.
     Программа отображает общее количество контейнеров, необходимых для упаковки предметов, и содержимое каждого контейнера.
     Ниже приведен пример выполнения программы:

     Введите количество предметов: 6
     Введите вес каждого предмета: 7 5 2 3 5 8
     Контейнер 1 содержит предметы с весом 7 2
     Контейнер 2 содержит предметы с весом 5 3
     Контейнер 3 содержит предметы с весом 5
     Контейнер 4 содержит предметы с весом 8
     Дает ли эта программа оптимальное решение, то есть находит ли она минимальное количество контейнеров для упаковки объектов?
     */


    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<ArrayList> containers = new ArrayList<>();
        ArrayList<Integer> objects = new ArrayList<>();
        final int MAX_KILO = 10;

        System.out.print("Введите количество предметов: ");
        int numObjs = input.nextInt();
        System.out.println();
        System.out.print("Введите вес каждого предмета:");

        for (int i = 0; i < numObjs; i++) {
            objects.add(input.nextInt());
        }
        int currentContainer = 0;
        containers.add(new ArrayList<Integer>());

        for (Integer object: objects) {
            while (true) {
                if (sum(containers.get(currentContainer)) + object > MAX_KILO) {
                    containers.add(new ArrayList<Integer>());
                    currentContainer++;
                    continue;
                } else {
                    containers.get(currentContainer).add(object);
                    break;
                }
            }
        }

        for (ArrayList list: containers) {
            System.out.println(list);
        }
    }

    public static int sum(ArrayList<Integer> list) {
        double result = 0;
        for (Integer val: list) {
            result += val;
        }
        return (int)result;
    }








}













































































